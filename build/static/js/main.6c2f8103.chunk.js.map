{"version":3,"sources":["App.js","index.js"],"names":["App","props","onSessionError","error","setState","onPublish","console","log","onPublishError","onSubscribe","onSubscribeError","toggleVideo","state","publishVideo","connection","sessionEventHandlers","sessionConnected","sessionDisconnected","sessionReconnected","sessionReconnecting","publisherEventHandlers","accessDenied","streamCreated","streamDestroyed","reason","subscriberEventHandlers","videoEnabled","videoDisabled","this","credentials","apiKey","sessionId","token","id","className","onError","eventHandlers","onClick","properties","width","height","React","Component","fetch","SAMPLE_SERVER_BASE_URL","then","data","json","ReactDOM","render","document","getElementById","catch","err","alert"],"mappings":"oNAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6CRC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAED,WA/CC,EAkDnBE,UAAY,WACVC,QAAQC,IAAI,oBAnDK,EAsDnBC,eAAiB,SAAAL,GACf,EAAKC,SAAS,CAAED,WAvDC,EA0DnBM,YAAc,WACZH,QAAQC,IAAI,sBA3DK,EA8DnBG,iBAAmB,SAAAP,GACjB,EAAKC,SAAS,CAAED,WA/DC,EAkEnBQ,YAAc,WACZ,EAAKP,UAAS,SAAAQ,GAAK,MAAK,CACtBC,cAAeD,EAAMC,kBAjEvB,EAAKD,MAAQ,CACXT,MAAO,KACPW,WAAY,aACZD,cAAc,GAGhB,EAAKE,qBAAuB,CAC1BC,iBAAkB,WAChB,EAAKZ,SAAS,CAAEU,WAAY,eAE9BG,oBAAqB,WACnB,EAAKb,SAAS,CAAEU,WAAY,kBAE9BI,mBAAoB,WAClB,EAAKd,SAAS,CAAEU,WAAY,iBAE9BK,oBAAqB,WACnB,EAAKf,SAAS,CAAEU,WAAY,mBAIhC,EAAKM,uBAAyB,CAC5BC,aAAc,WACZf,QAAQC,IAAI,uCAEde,cAAe,WACbhB,QAAQC,IAAI,6BAEdgB,gBAAiB,YAAiB,IAAdC,EAAa,EAAbA,OAClBlB,QAAQC,IAAR,8CAAmDiB,MAIvD,EAAKC,wBAA0B,CAC7BC,aAAc,WACZpB,QAAQC,IAAI,6BAEdoB,cAAe,WACbrB,QAAQC,IAAI,+BAzCC,E,0CAwEnB,WACE,MAAqCqB,KAAK3B,MAAM4B,YAAxCC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAAWC,EAA3B,EAA2BA,MAC3B,EAA4CJ,KAAKhB,MAAzCT,EAAR,EAAQA,MAAOW,EAAf,EAAeA,WAAYD,EAA3B,EAA2BA,aAC3B,OACE,gCACE,sBAAKoB,GAAG,gBAAR,6BAAyCnB,KACxCX,EACC,sBAAK+B,UAAU,QAAf,UACE,4CADF,IAC2B/B,KAEzB,KACJ,eAAC,YAAD,CACE2B,OAAQA,EACRC,UAAWA,EACXC,MAAOA,EACPG,QAASP,KAAK1B,eACdkC,cAAeR,KAAKb,qBALtB,UAOE,yBAAQkB,GAAG,cAAcI,QAAST,KAAKjB,YAAvC,UACGE,EAAe,UAAY,SAD9B,YAGA,cAAC,cAAD,CACEyB,WAAY,CAAEzB,eAAc0B,MAAO,GAAIC,OAAQ,IAC/CnC,UAAWuB,KAAKvB,UAChB8B,QAASP,KAAKpB,eACd4B,cAAeR,KAAKR,yBAEtB,cAAC,YAAD,UACE,cAAC,eAAD,CACEkB,WAAY,CAAEC,MAAO,IAAKC,OAAQ,KAClC/B,YAAamB,KAAKnB,YAClB0B,QAASP,KAAKlB,iBACd0B,cAAeR,KAAKH,sC,GAzGDgB,IAAMC,W,MCerCC,MAAMC,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAVL,SAAmBhB,GACjBmB,IAASC,OACP,cAAC,EAAD,CAAKpB,YAAaA,IAClBqB,SAASC,eAAe,YAQvBC,OAAM,SAACC,GACN/C,QAAQH,MAAM,oCAAqCkD,GACnDC,MAAM,kG","file":"static/js/main.6c2f8103.chunk.js","sourcesContent":["import React from 'react';\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber } from 'opentok-react';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      connection: 'Connecting',\n      publishVideo: true,\n    };\n\n    this.sessionEventHandlers = {\n      sessionConnected: () => {\n        this.setState({ connection: 'Connected' });\n      },\n      sessionDisconnected: () => {\n        this.setState({ connection: 'Disconnected' });\n      },\n      sessionReconnected: () => {\n        this.setState({ connection: 'Reconnected' });\n      },\n      sessionReconnecting: () => {\n        this.setState({ connection: 'Reconnecting' });\n      },\n    };\n\n    this.publisherEventHandlers = {\n      accessDenied: () => {\n        console.log('User denied access to media source');\n      },\n      streamCreated: () => {\n        console.log('Publisher stream created');\n      },\n      streamDestroyed: ({ reason }) => {\n        console.log(`Publisher stream destroyed because: ${reason}`);\n      },\n    };\n\n    this.subscriberEventHandlers = {\n      videoEnabled: () => {\n        console.log('Subscriber video enabled');\n      },\n      videoDisabled: () => {\n        console.log('Subscriber video disabled');\n      },\n    };\n  }\n\n  onSessionError = error => {\n    this.setState({ error });\n  };\n\n  onPublish = () => {\n    console.log('Publish Success');\n  };\n\n  onPublishError = error => {\n    this.setState({ error });\n  };\n\n  onSubscribe = () => {\n    console.log('Subscribe Success');\n  };\n\n  onSubscribeError = error => {\n    this.setState({ error });\n  };\n\n  toggleVideo = () => {\n    this.setState(state => ({\n      publishVideo: !state.publishVideo,\n    }));\n  };\n\n  render() {\n    const { apiKey, sessionId, token } = this.props.credentials;\n    const { error, connection, publishVideo } = this.state;\n    return (\n      <div>\n        <div id=\"sessionStatus\">Session Status: {connection}</div>\n        {error ? (\n          <div className=\"error\">\n            <strong>Error:</strong> {error}\n          </div>\n        ) : null}\n        <OTSession\n          apiKey={apiKey}\n          sessionId={sessionId}\n          token={token}\n          onError={this.onSessionError}\n          eventHandlers={this.sessionEventHandlers}\n        >\n          <button id=\"videoButton\" onClick={this.toggleVideo}>\n            {publishVideo ? 'Disable' : 'Enable'} Video\n          </button>\n          <OTPublisher\n            properties={{ publishVideo, width: 50, height: 50, }}\n            onPublish={this.onPublish}\n            onError={this.onPublishError}\n            eventHandlers={this.publisherEventHandlers}\n          />\n          <OTStreams>\n            <OTSubscriber\n              properties={{ width: 100, height: 100 }}\n              onSubscribe={this.onSubscribe}\n              onError={this.onSubscribeError}\n              eventHandlers={this.subscriberEventHandlers}\n            />\n          </OTStreams>\n        </OTSession>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@opentok/client';\n\nimport App from './App';\nimport './index.css';\n\nimport {\n  SAMPLE_SERVER_BASE_URL\n} from './config';\n\nfunction renderApp(credentials) {\n  ReactDOM.render(\n    <App credentials={credentials} />,\n    document.getElementById('root')\n  );\n}\n\n\n  fetch(SAMPLE_SERVER_BASE_URL + '/session')\n    .then(data => data.json())\n    .then(renderApp)\n    .catch((err) => {\n      console.error('Failed to get session credentials', err);\n      alert('Failed to get opentok sessionId and token. Make sure you have updated the config.js file.');\n    });\n\n"],"sourceRoot":""}